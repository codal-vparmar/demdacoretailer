{"version":3,"sources":["webpack:///./assets/js/theme/common/state-country.js","webpack:///./assets/js/theme/common/form-validation.js","webpack:///./assets/js/theme/auth.js"],"names":["options","callback","$","on","event","countryName","currentTarget","val","api","country","getByName","err","response","context","state_error","$currentInput","isEmpty","data","states","newElement","stateElement","attrs","transform","prop","result","item","ret","name","value","replacementAttributes","type","id","class","replaceWith","$newElement","length","prev","find","hide","makeStateOptional","$selectElement","$hiddenInput","remove","append","required","show","makeStateRequired","statesArray","container","push","prefix","each","stateObj","useIdForStates","html","join","addOptions","buildValidation","$validateableElement","validation","fieldValidations","formFieldSelector","attr","dateValidation","$formField","min_date","max_date","invalidMessage","formElementId","minSplit","split","maxSplit","minDate","Date","maxDate","selector","triggeredBy","validate","cb","day","Number","month","year","chosenDate","errorMessage","buildDateValidation","index","element","$inputElement","tagName","get","inputName","elementSelector","label","min","max","numberVal","buildNumberRangeValidation","buildRequiredValidation","formFieldId","secondarySelector","checkbox","checked","buildRequiredCheckboxValidation","validationsToPerform","$form","input","concat","Auth","super","this","formCreateSelector","$loginForm","loginModel","loginValidator","submit","add","email","useValidEmail","password","enterPass","performCheck","areAll","preventDefault","$forgotPasswordForm","forgotPasswordValidator","newPasswordValidator","passwordSelector","password2Selector","setPasswordValidation","passwordRequirements","$createAccountForm","validationModel","createAccountValidator","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","$last","field","Error","$field","getStatus","is","setStateCountryValidation","cleanUpStateValidation","setEmailValidation","$newPasswordForm","registerLoginValidation","registerNewPasswordValidation","registerForgotPasswordValidation","registerCreateAccountValidator"],"mappings":"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","file":"theme-bundle.chunk.12.js","sourcesContent":["import utils from '@bigcommerce/stencil-utils';\r\nimport _ from 'lodash';\r\nimport { insertStateHiddenField } from './form-utils';\r\nimport { showAlertModal } from '../global/modal';\r\n\r\n/**\r\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\r\n * @returns {jQuery|HTMLElement}\r\n */\r\nfunction makeStateRequired(stateElement, context) {\r\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\r\n        const ret = result;\r\n        ret[item.name] = item.value;\r\n        return ret;\r\n    });\r\n\r\n    const replacementAttributes = {\r\n        id: attrs.id,\r\n        'data-label': attrs['data-label'],\r\n        class: 'form-select',\r\n        name: attrs.name,\r\n        'data-field-type': attrs['data-field-type'],\r\n    };\r\n\r\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\r\n\r\n    const $newElement = $('[data-field-type=\"State\"]');\r\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\r\n\r\n    if ($hiddenInput.length !== 0) {\r\n        $hiddenInput.remove();\r\n    }\r\n\r\n    if ($newElement.prev().find('small').length === 0) {\r\n        // String is injected from localizer\r\n        $newElement.prev().append(`<small>${context.required}</small>`);\r\n    } else {\r\n        $newElement.prev().find('small').show();\r\n    }\r\n\r\n    return $newElement;\r\n}\r\n\r\n/**\r\n * If a country with states is the default, a select will be sent,\r\n * In this case we need to be able to switch to an input field and hide the required field\r\n */\r\nfunction makeStateOptional(stateElement) {\r\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\r\n        const ret = result;\r\n        ret[item.name] = item.value;\r\n\r\n        return ret;\r\n    });\r\n\r\n    const replacementAttributes = {\r\n        type: 'text',\r\n        id: attrs.id,\r\n        'data-label': attrs['data-label'],\r\n        class: 'form-input',\r\n        name: attrs.name,\r\n        'data-field-type': attrs['data-field-type'],\r\n    };\r\n\r\n    stateElement.replaceWith($('<input />', replacementAttributes));\r\n\r\n    const $newElement = $('[data-field-type=\"State\"]');\r\n\r\n    if ($newElement.length !== 0) {\r\n        insertStateHiddenField($newElement);\r\n        $newElement.prev().find('small').hide();\r\n    }\r\n\r\n    return $newElement;\r\n}\r\n\r\n/**\r\n * Adds the array of options from the remote request to the newly created select box.\r\n * @param {Object} statesArray\r\n * @param {jQuery} $selectElement\r\n * @param {Object} options\r\n */\r\nfunction addOptions(statesArray, $selectElement, options) {\r\n    const container = [];\r\n\r\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\r\n\r\n    if (!_.isEmpty($selectElement)) {\r\n        _.each(statesArray.states, (stateObj) => {\r\n            if (options.useIdForStates) {\r\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\r\n            } else {\r\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\r\n            }\r\n        });\r\n\r\n        $selectElement.html(container.join(' '));\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {jQuery} stateElement\r\n * @param {Object} context\r\n * @param {Object} options\r\n * @param {Function} callback\r\n */\r\nexport default function (stateElement, context = {}, options, callback) {\r\n    /**\r\n     * Backwards compatible for three parameters instead of four\r\n     *\r\n     * Available options:\r\n     *\r\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\r\n     */\r\n    if (typeof options === 'function') {\r\n        /* eslint-disable no-param-reassign */\r\n        callback = options;\r\n        options = {};\r\n        /* eslint-enable no-param-reassign */\r\n    }\r\n\r\n    $('select[data-field-type=\"Country\"]').on('change', event => {\r\n        const countryName = $(event.currentTarget).val();\r\n\r\n        if (countryName === '') {\r\n            return;\r\n        }\r\n\r\n        utils.api.country.getByName(countryName, (err, response) => {\r\n            if (err) {\r\n                showAlertModal(context.state_error);\r\n                return callback(err);\r\n            }\r\n\r\n            const $currentInput = $('[data-field-type=\"State\"]');\r\n\r\n            if (!_.isEmpty(response.data.states)) {\r\n                // The element may have been replaced with a select, reselect it\r\n                const $selectElement = makeStateRequired($currentInput, context);\r\n\r\n                addOptions(response.data, $selectElement, options);\r\n                callback(null, $selectElement);\r\n            } else {\r\n                const newElement = makeStateOptional($currentInput, context);\r\n\r\n                callback(null, newElement);\r\n            }\r\n        });\r\n    });\r\n}\r\n","/**\r\n * Validate that the given date for the day/month/year select inputs is within potential range\r\n * @param $formField\r\n * @param validation\r\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\r\n */\r\nfunction buildDateValidation($formField, validation) {\r\n    // No date range restriction, skip\r\n    if (validation.min_date && validation.max_date) {\r\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\r\n        const formElementId = $formField.attr('id');\r\n        const minSplit = validation.min_date.split('-');\r\n        const maxSplit = validation.max_date.split('-');\r\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\r\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\r\n\r\n        return {\r\n            selector: `#${formElementId} select[data-label=\"year\"]`,\r\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\r\n            validate: (cb, val) => {\r\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\r\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\r\n                const year = Number(val);\r\n                const chosenDate = new Date(year, month, day);\r\n\r\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\r\n            },\r\n            errorMessage: invalidMessage,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\r\n * from many different inputs\r\n * @param $formField\r\n * @param validation\r\n */\r\nfunction buildRequiredCheckboxValidation($formField, validation) {\r\n    const formFieldId = $formField.attr('id');\r\n    const primarySelector = `#${formFieldId} input:first-of-type`;\r\n    const secondarySelector = `#${formFieldId} input`;\r\n\r\n    return {\r\n        selector: primarySelector,\r\n        triggeredBy: secondarySelector,\r\n        validate: (cb) => {\r\n            let result = false;\r\n\r\n            $(secondarySelector).each((index, checkbox) => {\r\n                if (checkbox.checked) {\r\n                    result = true;\r\n\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            cb(result);\r\n        },\r\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\r\n    };\r\n}\r\n\r\nfunction buildRequiredValidation(validation, selector) {\r\n    return {\r\n        selector,\r\n        validate(cb, val) {\r\n            cb(val.length > 0);\r\n        },\r\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\r\n    };\r\n}\r\n\r\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\r\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\r\n    const min = Number(validation.min);\r\n    const max = Number(validation.max);\r\n\r\n    return {\r\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\r\n        validate: (cb, val) => {\r\n            const numberVal = Number(val);\r\n\r\n            cb(numberVal >= min && numberVal <= max);\r\n        },\r\n        errorMessage: invalidMessage,\r\n    };\r\n}\r\n\r\n\r\nfunction buildValidation($validateableElement) {\r\n    const validation = $validateableElement.data('validation');\r\n    const fieldValidations = [];\r\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\r\n\r\n    if (validation.type === 'datechooser') {\r\n        const dateValidation = buildDateValidation($validateableElement, validation);\r\n\r\n        if (dateValidation) {\r\n            fieldValidations.push(dateValidation);\r\n        }\r\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\r\n        fieldValidations.push(buildRequiredCheckboxValidation($validateableElement, validation));\r\n    } else {\r\n        $validateableElement.find('input, select, textarea').each((index, element) => {\r\n            const $inputElement = $(element);\r\n            const tagName = $inputElement.get(0).tagName;\r\n            const inputName = $inputElement.attr('name');\r\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\r\n\r\n            if (validation.type === 'numberonly') {\r\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\r\n            }\r\n            if (validation.required) {\r\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector));\r\n            }\r\n        });\r\n    }\r\n\r\n    return fieldValidations;\r\n}\r\n\r\n/**\r\n * Builds the validation model for dynamic forms\r\n * @param $form\r\n * @returns {Array}\r\n */\r\nexport default function ($form) {\r\n    let validationsToPerform = [];\r\n\r\n    $form.find('[data-validation]').each((index, input) => {\r\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input)));\r\n    });\r\n\r\n    return validationsToPerform;\r\n}\r\n","import PageManager from './page-manager';\r\nimport stateCountry from './common/state-country';\r\nimport nod from './common/nod';\r\nimport validation from './common/form-validation';\r\nimport forms from './common/models/forms';\r\nimport { classifyForm, Validators } from './common/form-utils';\r\n\r\nexport default class Auth extends PageManager {\r\n    constructor(context) {\r\n        super(context);\r\n        this.formCreateSelector = 'form[data-create-account-form]';\r\n    }\r\n\r\n    registerLoginValidation($loginForm) {\r\n        const loginModel = forms;\r\n\r\n        this.loginValidator = nod({\r\n            submit: '.login-form input[type=\"submit\"]',\r\n        });\r\n\r\n        this.loginValidator.add([\r\n            {\r\n                selector: '.login-form input[name=\"login_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = loginModel.email(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.useValidEmail,\r\n            },\r\n            {\r\n                selector: '.login-form input[name=\"login_pass\"]',\r\n                validate: (cb, val) => {\r\n                    const result = loginModel.password(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.enterPass,\r\n            },\r\n        ]);\r\n\r\n        $loginForm.on('submit', event => {\r\n            this.loginValidator.performCheck();\r\n\r\n            if (this.loginValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    registerForgotPasswordValidation($forgotPasswordForm) {\r\n        this.forgotPasswordValidator = nod({\r\n            submit: '.forgot-password-form input[type=\"submit\"]',\r\n        });\r\n\r\n        this.forgotPasswordValidator.add([\r\n            {\r\n                selector: '.forgot-password-form input[name=\"email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = forms.email(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.useValidEmail,\r\n            },\r\n        ]);\r\n\r\n        $forgotPasswordForm.on('submit', event => {\r\n            this.forgotPasswordValidator.performCheck();\r\n\r\n            if (this.forgotPasswordValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    registerNewPasswordValidation() {\r\n        const newPasswordForm = '.new-password-form';\r\n        const newPasswordValidator = nod({\r\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\r\n        });\r\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\r\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\r\n\r\n        Validators.setPasswordValidation(\r\n            newPasswordValidator,\r\n            passwordSelector,\r\n            password2Selector,\r\n            this.passwordRequirements,\r\n        );\r\n    }\r\n\r\n    registerCreateAccountValidator($createAccountForm) {\r\n        const validationModel = validation($createAccountForm);\r\n        const createAccountValidator = nod({\r\n            submit: `${this.formCreateSelector} input[type='submit']`,\r\n        });\r\n        const $stateElement = $('[data-field-type=\"State\"]');\r\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\r\n        const $emailElement = $(emailSelector);\r\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\r\n        const $passwordElement = $(passwordSelector);\r\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\r\n        const $password2Element = $(password2Selector);\r\n\r\n        createAccountValidator.add(validationModel);\r\n\r\n        if ($stateElement) {\r\n            let $last;\r\n\r\n            // Requests the states for a country with AJAX\r\n            stateCountry($stateElement, this.context, (err, field) => {\r\n                if (err) {\r\n                    throw new Error(err);\r\n                }\r\n\r\n                const $field = $(field);\r\n\r\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\r\n                    createAccountValidator.remove($stateElement);\r\n                }\r\n\r\n                if ($last) {\r\n                    createAccountValidator.remove($last);\r\n                }\r\n\r\n                if ($field.is('select')) {\r\n                    $last = field;\r\n                    Validators.setStateCountryValidation(createAccountValidator, field);\r\n                } else {\r\n                    Validators.cleanUpStateValidation(field);\r\n                }\r\n            });\r\n        }\r\n\r\n        if ($emailElement) {\r\n            createAccountValidator.remove(emailSelector);\r\n            Validators.setEmailValidation(createAccountValidator, emailSelector);\r\n        }\r\n\r\n        if ($passwordElement && $password2Element) {\r\n            createAccountValidator.remove(passwordSelector);\r\n            createAccountValidator.remove(password2Selector);\r\n            Validators.setPasswordValidation(\r\n                createAccountValidator,\r\n                passwordSelector,\r\n                password2Selector,\r\n                this.passwordRequirements,\r\n            );\r\n        }\r\n\r\n        $createAccountForm.on('submit', event => {\r\n            createAccountValidator.performCheck();\r\n\r\n            if (createAccountValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\r\n     */\r\n    onReady() {\r\n        const $createAccountForm = classifyForm(this.formCreateSelector);\r\n        const $loginForm = classifyForm('.login-form');\r\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\r\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\r\n\r\n        // Injected via auth.html\r\n        this.passwordRequirements = this.context.passwordRequirements;\r\n\r\n        if ($loginForm.length) {\r\n            this.registerLoginValidation($loginForm);\r\n        }\r\n\r\n        if ($newPasswordForm.length) {\r\n            this.registerNewPasswordValidation();\r\n        }\r\n\r\n        if ($forgotPasswordForm.length) {\r\n            this.registerForgotPasswordValidation($forgotPasswordForm);\r\n        }\r\n\r\n        if ($createAccountForm.length) {\r\n            this.registerCreateAccountValidator($createAccountForm);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}