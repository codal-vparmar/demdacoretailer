{"version":3,"sources":["webpack:///./assets/js/theme/common/gift-certificate-validator.js","webpack:///./assets/js/theme/gift-certificate.js"],"names":["cert","GiftCertificate","context","super","$certBalanceForm","$","purchaseModel","recipientName","val","length","recipientEmail","args","email","senderName","senderEmail","customAmount","value","min","max","options","found","forEach","option","$purchaseForm","$customAmounts","find","purchaseValidator","submit","delay","$element","data","minFormatted","maxFormatted","add","selector","validate","cb","numberVal","Number","errorMessage","this","toName","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","previewUrl","currentTarget","serialize","open","getPage","err","content","updateContent","previewError","wrap","$balanceForm","balanceValidator"],"mappings":"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","file":"theme-bundle.chunk.1.js","sourcesContent":["export default function (cert) {\r\n    if (typeof cert !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    // Add any custom gift certificate validation logic here\r\n    return true;\r\n}\r\n","import PageManager from './page-manager';\r\nimport nod from './common/nod';\r\nimport giftCertChecker from './common/gift-certificate-validator';\r\nimport formModel from './common/models/forms';\r\nimport { api } from '@bigcommerce/stencil-utils';\r\nimport { defaultModal } from './global/modal';\r\n\r\nexport default class GiftCertificate extends PageManager {\r\n    constructor(context) {\r\n        super(context);\r\n\r\n        const $certBalanceForm = $('#gift-certificate-balance');\r\n\r\n        const purchaseModel = {\r\n            recipientName(val) {\r\n                return val.length;\r\n            },\r\n            recipientEmail(...args) {\r\n                return formModel.email(...args);\r\n            },\r\n            senderName(val) {\r\n                return val.length;\r\n            },\r\n            senderEmail(...args) {\r\n                return formModel.email(...args);\r\n            },\r\n            customAmount(value, min, max) {\r\n                return value && value >= min && value <= max;\r\n            },\r\n            setAmount(value, options) {\r\n                let found = false;\r\n\r\n                options.forEach((option) => {\r\n                    if (option === value) {\r\n                        found = true;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                return found;\r\n            },\r\n        };\r\n\r\n        const $purchaseForm = $('#gift-certificate-form');\r\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\r\n        const purchaseValidator = nod({\r\n            submit: '#gift-certificate-form input[type=\"submit\"]',\r\n            delay: 300,\r\n        });\r\n\r\n        if ($customAmounts.length) {\r\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\r\n            const min = $element.data('min');\r\n            const minFormatted = $element.data('minFormatted');\r\n            const max = $element.data('max');\r\n            const maxFormatted = $element.data('maxFormatted');\r\n\r\n            purchaseValidator.add({\r\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\r\n                validate: (cb, val) => {\r\n                    const numberVal = Number(val);\r\n\r\n                    if (!numberVal) {\r\n                        cb(false);\r\n                    }\r\n\r\n                    cb(numberVal >= min && numberVal <= max);\r\n                },\r\n                errorMessage: `You must enter a certificate amount between ${minFormatted} and ${maxFormatted}.`,\r\n            });\r\n        }\r\n\r\n        purchaseValidator.add([\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.recipientName(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.toName,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.recipientEmail(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.toEmail,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.senderName(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.fromName,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.senderEmail(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.fromEmail,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\r\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\r\n\r\n                    cb(typeof (val) === 'string');\r\n                },\r\n                errorMessage: this.context.certTheme,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"agree\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\r\n\r\n                    cb(val);\r\n                },\r\n                errorMessage: this.context.agreeToTerms,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\r\n\r\n                    cb(val);\r\n                },\r\n                errorMessage: this.context.agreeToTerms,\r\n            },\r\n        ]);\r\n\r\n        if ($certBalanceForm.length) {\r\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\r\n\r\n            $certBalanceForm.on('submit', () => {\r\n                balanceVal.performCheck();\r\n\r\n                if (!balanceVal.areAll('valid')) {\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n        $purchaseForm.on('submit', event => {\r\n            purchaseValidator.performCheck();\r\n\r\n            if (!purchaseValidator.areAll('valid')) {\r\n                return event.preventDefault();\r\n            }\r\n        });\r\n\r\n        $('#gift-certificate-preview').click(event => {\r\n            event.preventDefault();\r\n\r\n            purchaseValidator.performCheck();\r\n\r\n            if (!purchaseValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            const modal = defaultModal();\r\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\r\n\r\n            modal.open();\r\n\r\n            api.getPage(previewUrl, {}, (err, content) => {\r\n                if (err) {\r\n                    return modal.updateContent(this.context.previewError);\r\n                }\r\n\r\n                modal.updateContent(content, { wrap: true });\r\n            });\r\n        });\r\n    }\r\n\r\n    checkCertBalanceValidator($balanceForm) {\r\n        const balanceValidator = nod({\r\n            submit: $balanceForm.find('input[type=\"submit\"]'),\r\n        });\r\n\r\n        balanceValidator.add({\r\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\r\n            validate(cb, val) {\r\n                cb(giftCertChecker(val));\r\n            },\r\n            errorMessage: 'You must enter a certificate code.',\r\n        });\r\n\r\n        return balanceValidator;\r\n    }\r\n}\r\n"],"sourceRoot":""}